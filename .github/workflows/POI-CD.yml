name: POI-CD
on:
  push:
    branches: [main, ch8]
    paths:
      - apis/poi/**
      - .github/workflows/POI-CD.yml

env:
  registry: openhackf603h60acr.azurecr.io
  repository: devopsoh/api-poi
  docker_path: apis/poi/web
  webapp_name: openhackdct2jkx0poi
  resource_group: openhackf603h606rg
  staging_url_healthcheck: https://openhackf603h60poi-staging.azurewebsites.net/api/healthcheck/poi
  production_url_healthcheck: https://openhackf603h60poi.azurewebsites.net/api/healthcheck/poi

jobs:
  docker_build_and_push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Docker login
        run: docker login $registry -u ${{ secrets.ACR_USER }} -p ${{ secrets.ACR_KEY }}

      - name: Docker build
        run: docker build -t $registry/$repository:${{github.run_number}} --build-arg build_version=${{github.run_number}} $docker_path

      - name: Docker Push
        run: docker push $registry/$repository:${{github.run_number}}

      - uses: nashmaniac/create-issue-action@v1.1
        if: failure()
        name: Create Issue Action
        with:
          title: Build Failed
          token: ${{secrets.GITHUB_TOKEN}}
          assignees: ${{github.actor}}
          labels: workflow-failed
          body: |
            ${{ github.workflow }} Workflow failed for commit ${{github.sha}}
            Build Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

  staging_deploy:
    runs-on: ubuntu-latest
    needs: docker_build_and_push
    steps:
      - name: Azure authentication
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS  }}

      - name: Azure WebApp
        uses: Azure/webapps-deploy@v2
        with:
          slot-name: staging
          app-name: ${{ env.webapp_name }}
          images: ${{ env.registry }}/${{ env.repository }}:${{github.run_number}}

      - name: Apply App Versioning
        uses: azure/appservice-settings@v1
        with:
          slot-name: staging
          app-name: ${{ env.webapp_name }}
          mask-inputs: false
          app-settings-json: '[{ "name": "APP_VERSION", "value": "${{github.run_number}}", "slotSetting": false }]'

  validate_staging:
    runs-on: ubuntu-latest
    needs: staging_deploy
    steps:
      - name: Azure authentication
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS  }}

      - uses: actions/checkout@v2 # needed to get the script

      - name: Run Validation script
        run: |
          chmod +x ./.github/build/healthcheck.sh
          ./.github/build/healthcheck.sh -i ${{ env.staging_url_healthcheck }}

  canary-deploy-1:
    needs: validate_staging
    uses: .github/workflows/POI-CD.yml@ch8
    with:
      slot_name: staging
      webapp_name: ${{ env.webapp_name }}
      webapp_resource_group: ${{ env.resource_group }}
      percentage: 20
      production_url_healthcheck: ${{ env.production_url_healthcheck }}
    secrets:
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}

  canary-deploy-2:
    needs: canary-deploy-1
    uses: .github/workflows/POI-CD.yml@ch8
    with:
      slot_name: staging
      webapp_name: ${{ env.webapp_name }}
      webapp_resource_group: ${{ env.resource_group }}
      percentage: 20
      production_url_healthcheck: ${{ env.production_url_healthcheck }}
    secrets:
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
      
  production_deploy:
    runs-on: ubuntu-latest
    needs: canary-deploy-2
    environment: production
    steps:
      - name: Azure authentication
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS  }}

      - name: Swap staging to production
        run: |
          az webapp deployment slot swap -n $webapp_name -g $resource_group --slot staging --target-slot production   
          echo "Promoted staging to production"

  validate_production:
    runs-on: ubuntu-latest
    needs: production_deploy
    steps:
      - uses: actions/checkout@v2

      - name: Run Validation script
        run: |
          chmod +x ./.github/build/healthcheck.sh
          ./.github/build/healthcheck.sh -i ${{ env.production_url_healthcheck }}

  clean_up:
    runs-on: ubuntu-latest
    needs: [production_deploy, validate_production]
    steps:
      - name: Azure authentication
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS  }}

      - name: stop staging slot
        run: |
          az webapp stop -g ${{ env.resource_group }} -n ${{ env.webapp_name }} -s staging
          echo "staging slot stopped"

  restore_previous:
    runs-on: ubuntu-latest
    needs: [production_deploy, validate_production]
    if: always() && (needs.validate_production.result == 'failure' && needs.production_deploy.result == 'success')
    steps:
      - name: Azure authentication
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS  }}

      - name: restoring previous production slot
        run: |
          az webapp deployment slot swap -n $webapp_name -g $resource_group --slot staging --target-slot production
          echo "restored previous production slot"
